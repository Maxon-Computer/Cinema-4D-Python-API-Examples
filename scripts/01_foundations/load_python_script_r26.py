"""
Copyright: MAXON Computer GmbH
Author: Maxime Adam

Description:
    - Create a new temporary script.
    - Load an existing Python file into the Script Manager.
    - Retrieve the first script not active in the script manager and make it active.

Class/method highlighted:
    - c4d.CreateNewPythonScript()
    - c4d.LoadPythonScript()
    - c4d.GetScriptHead()
    - c4d.GetDynamicScriptID()
    - c4d.SetActiveScriptObject()
"""
import c4d
import os


def CreateNewPythonScript():
    """ Create a new temporary script.
    """
    # Create a new temporary script. The first argument is the script name. If an empty string is used as the script
    # name, Cinema 4D will generate automatically the name. The second argument being the content of the script.
    # The new script will be set as active automatically.
    newScript = c4d.CreateNewPythonScript("", r"print('Sometimes science is more art than science.')")

    # ScriptObject being BaseList2D the usual C4DAtom bracket operator can be used to access various properties from it.
    scriptName = newScript[c4d.PYTHONSCRIPT_SCRIPTNAME]

    # An empty PYTHONSCRIPT_SCRIPTPATH indicate that this script is not saved and will be deleted once Cinema 4D close.
    scriptPath = newScript[c4d.PYTHONSCRIPT_SCRIPTPATH]

    # PYTHONSCRIPT_TEXT returns the python script visible in hte Script Manager.
    scriptContent = newScript[c4d.PYTHONSCRIPT_TEXT]

    print(f"Added '{scriptName}', it's content in the Script Manager is:\n{scriptContent}")


def LoadExistingPythonScript():
    """Load an existing Python file into the Script Manager.
    """
    scriptPathToLoad = os.path.join(os.path.dirname(__file__), "reg_plugin_info_r23.py")

    # Load the script in the script manager and set it as active automatically
    loadedScript = c4d.LoadPythonScript(scriptPathToLoad)

    # ScriptObject being BaseList2D the usual C4DAtom bracket operator can be used to access various properties from it.
    scriptName = loadedScript[c4d.PYTHONSCRIPT_SCRIPTNAME]

    # An empty PYTHONSCRIPT_SCRIPTPATHindicate that this script is not saved and will be deleted once Cinema 4D close.
    scriptPath = loadedScript[c4d.PYTHONSCRIPT_SCRIPTPATH]

    # PYTHONSCRIPT_TEXT returns the python script visible in hte Script Manager.
    scriptContent = loadedScript[c4d.PYTHONSCRIPT_TEXT]

    print(f"Load '{scriptName}', from '{scriptPath}' it's content in the Script Manager is:\n{scriptContent}")


def SetActiveScript():
    """Retrieve the first script not active in the script manager and make it active.

    Scripts available in the script manager are BaseList2D stored into a specific GeListHead.
    """
    def HierarchyIterator(obj):
        """A Python Generator to iterate over the Hierarchy.
        Args:
            obj: The starting object of the python generator (will be the first result)
        Returns:
            All objects under and next of the `obj`
        """
        while obj:
            yield obj
            for opChild in HierarchyIterator(obj.GetDown()):
                yield opChild
            obj = obj.GetNext()

    # Retrieve the script list head.
    scriptHead = c4d.GetScriptHead()

    # Retrieve the first script not active in the script manager and make it active.
    # A script is active when it has its code displayed in the script manager.
    for scriptOp in HierarchyIterator(scriptHead.GetFirst()):
        # Go to the next script object if the script is already active in the script manager.
        if scriptOp.GetBit(c4d.BIT_ACTIVE):
            continue

        # Retrieve the unique plugin ID generated by Cinema 4D for this script.
        scriptId = c4d.GetDynamicScriptID(scriptOp)

        # Define this script as the new script to be active in the script manager.
        c4d.SetActiveScriptObject(scriptId)

        # ScriptObject being BaseList2D the usual C4DAtom bracket operator can be used to access various properties from it.
        scriptName = scriptOp[c4d.PYTHONSCRIPT_SCRIPTNAME]

        # An empty PYTHONSCRIPT_SCRIPTPATH indicate that this script is not saved and will be deleted once Cinema 4D close.
        scriptPath = scriptOp[c4d.PYTHONSCRIPT_SCRIPTPATH]

        # PYTHONSCRIPT_TEXT returns the python script visible in hte Script Manager.
        scriptContent = scriptOp[c4d.PYTHONSCRIPT_TEXT]

        print(f"Set as active '{scriptName}', saved in `{scriptPath}` with the next content in"
              f" the Script Manager is:\n{scriptContent}")

        break


def main():
    CreateNewPythonScript()
    LoadExistingPythonScript()
    SetActiveScript()


if __name__ == "__main__":
    main()
